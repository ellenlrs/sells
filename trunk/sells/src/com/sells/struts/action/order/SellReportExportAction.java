/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sells.struts.action.order;

import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.sells.common.util.DateUtils;
import com.sells.dao.Sells;
import com.sells.service.imp.SellsService;

/**
 * MyEclipse Struts Creation date: 09-07-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class SellReportExportAction extends Action {
  private SellsService sellsService;
  private Log log = LogFactory.getLog(SellReportExportAction.class);
  private ServletContext servletContext;

  /*
   * (non-Javadoc)
   * 
   * @see org.apache.struts.action.Action#setServlet(org.apache.struts.action.
   * ActionServlet)
   */
  public void setServlet(ActionServlet actionServlet) {
    super.setServlet(actionServlet);
    servletContext = actionServlet.getServletContext();
    WebApplicationContext wac = WebApplicationContextUtils
        .getRequiredWebApplicationContext(servletContext);
    this.sellsService = (SellsService) wac.getBean("sellsService");
  }

  /**
   * Method execute
   * 
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward execute(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    HttpSession session = request.getSession();
    ActionErrors errors = new ActionErrors();
    try {
      Sells sells = (Sells) session.getAttribute("sells");
      if (sells == null) {
        return mapping.findForward("sessionLost1");
      }
      Map<String, String> map = new HashMap();
      map.put("b.item_no,b.item_nm", "商品編號,商品名稱");
      map.put("a.member_no,a.name", "會員編號,訂購人姓名");
      map.put("date_format(a.order_dt,'%Y%m')", "訂單月份");
      // log.info("aaaaa1");
      String[] orderSt = request.getParameterValues("orderSt");
      String[] cols = request.getParameterValues("col");
      ArrayList<String> header = new ArrayList();
      header.add("訂單狀態");
      int _row = 0;
      if (null == cols || cols.length == 0) { // 使用所有欄位
        header.add("商品編號");
        header.add("商品名稱");
        header.add("會員編號");
        header.add("訂購人姓名");
        header.add("訂單月份");
      } else {
        for (int i = 0; i < cols.length; i++) {
          if (map.containsKey(cols[i])) {
            header
                .addAll(Arrays.asList(StringUtils.split(map.get(cols[i]), ",")));
          }
        }
      }
      header.add("小計");
      String endDt = StringUtils.defaultString(request.getParameter("endDt"));
      String startDt = StringUtils.defaultString(request
          .getParameter("startDt"));
      // sells.getSellsNo();
      // for (int i = 0; i < cols.length; i++) {
      // log.info("cols-" + i + cols[i]);
      // }
      // log.info("aaaaa1-1" + endDt);
      // log.info("aaaaa1-2" + startDt);
      // log.info("aaaaa1-3" + orderSt.length);
      // log.info("aaaaa1-4" + cols.length);
      // log.info("aaaaa2");
      if ("".equals(endDt)) {
        return mapping.findForward("success");
      }
      if ("".equals(startDt)) {
        return mapping.findForward("success");
      }
      if (DateUtils.getDiffDays(startDt, endDt) > 100
          || DateUtils.getDiffDays(startDt, endDt) < -100) {
        return mapping.findForward("success");
      }
      // log.info("aaaaa3");
      List<Object[]> list = sellsService.findOrderReport(sells.getSellsNo(),
          startDt, endDt, orderSt, cols);
      response.setContentType("APPLICATION/OCTET-STREAM;charset=Big5");
      response.setHeader("Content-Disposition",
          "attachment;filename=orderexport-" + DateUtils.getToday() + ".xls");
      request.setCharacterEncoding("Utf-8");
      OutputStream out = response.getOutputStream();
      HSSFWorkbook wb = new HSSFWorkbook();
      HSSFSheet sheet = wb.createSheet("User Data");
      // setting font
      HSSFCellStyle headerCellStyle = wb.createCellStyle();
      HSSFCellStyle bodyCellStyle = wb.createCellStyle();
      HSSFFont boldFont = wb.createFont();
      HSSFFont normalFont = wb.createFont();
      boldFont.setFontHeightInPoints((short) 12);
      boldFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
      headerCellStyle.setFont(boldFont);
      normalFont.setFontHeightInPoints((short) 12);
      bodyCellStyle.setFont(normalFont);
      HSSFRow row = sheet.createRow(0);
      HSSFCell cell;
      // write headr ;
      for (int i = 0; i < header.size(); i++) {
        sheet.setColumnWidth(i, 3500);
        cell = row.createCell(i);
        cell.setCellStyle(headerCellStyle);
        cell.setCellValue(new HSSFRichTextString(header.get(i)));
      }
      // write body ;
      for (int i = 0; i < list.size(); i++) {
        row = sheet.createRow(i + 1);
        Object[] data = list.get(i);
        for (int ii = 0; ii < header.size(); ii++) {
          cell = row.createCell(ii);
          cell.setCellStyle(bodyCellStyle);
          if (ii == 0) {
            if (ObjectUtils.toString(data[ii]).equals("00")) {
              cell.setCellValue(new HSSFRichTextString("處理中"));
            }
            if (ObjectUtils.toString(data[ii]).equals("10")) {
              cell.setCellValue(new HSSFRichTextString("出貨"));
            }
            if (ObjectUtils.toString(data[ii]).equals("20")) {
              cell.setCellValue(new HSSFRichTextString("匯款已收到"));
            }
            if (ObjectUtils.toString(data[ii]).equals("30")) {
              cell.setCellValue(new HSSFRichTextString("備貨中"));
            }
            if (ObjectUtils.toString(data[ii]).equals("99")) {
              cell.setCellValue(new HSSFRichTextString("取消"));
            }
            if (ObjectUtils.toString(data[ii]).equals("80")) {
              cell.setCellValue(new HSSFRichTextString("線上付款未完成"));
            }
            if (ObjectUtils.toString(data[ii]).equals("85")) {
              cell.setCellValue(new HSSFRichTextString("線上付款成功"));
            }
            if (ObjectUtils.toString(data[ii]).equals("88")) {
              cell.setCellValue(new HSSFRichTextString("線上付款失敗"));
            }
            // <label><input type="checkbox" name="orderSt" checked value="00"
            // />處理中</label>
            // <label><input type="checkbox" name="orderSt" checked value="10"
            // />出貨</label>
            // <label><input type="checkbox" name="orderSt" checked value="20"
            // />匯款已收到</label>
            // <label><input type="checkbox" name="orderSt" checked value="30"
            // />備貨中</label>
            // <label><input type="checkbox" name="orderSt" checked value="99"
            // />取消</label>
            // <label><input type="checkbox" name="orderSt" checked value="80"
            // />線上付款未完成</label>
            // <label><input type="checkbox" name="orderSt" checked value="85"
            // />線上付款成功</label>
            // <label><input type="checkbox" name="orderSt" checked value="88"
            // />線上付款失敗</label>
          } else {
            cell.setCellValue(new HSSFRichTextString(ObjectUtils
                .toString(data[ii])));
          }
        }
        // log.info(i + "-data[0]:" + data[0]);
      }
      // write footer ;
      // log.info("aaaaa4");
      wb.write(out);
      out.flush();
      out.close();
      return null;
    } catch (Exception e) {
      log.info(e.getMessage());
      errors.add("errMsg", new ActionError("alert.Error", e.getMessage()));
      saveErrors(request, errors);
      return mapping.findForward("error3");
    }
  }
}