/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sells.struts.action.member;

import java.util.Collection;
import java.util.Iterator;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import com.sells.dao.Member;
import com.sells.dao.Sells;
import com.sells.search.MemberSearch;
import com.sells.service.imp.MemberService;

/**
 * 電子報名單匯出 MyEclipse Struts Creation date: 09-06-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class MemberQuery2Action extends Action {
  private MemberService memberService;
  private Log log = LogFactory.getLog(MemberQuery2Action.class);
  private ServletContext servletContext;

  /*
   * (non-Javadoc)
   * 
   * @see org.apache.struts.action.Action#setServlet(org.apache.struts.action.ActionServlet)
   */
  public void setServlet(ActionServlet actionServlet) {
    super.setServlet(actionServlet);
    servletContext = actionServlet.getServletContext();
    WebApplicationContext wac = WebApplicationContextUtils
        .getRequiredWebApplicationContext(servletContext);
    this.memberService = (MemberService) wac.getBean("memberService");
  }

  /**
   * Method execute
   * 
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward execute(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    HttpSession session = request.getSession();
    ActionErrors errors = new ActionErrors();
    try {
      Sells sells = (Sells) session.getAttribute("sells");
      if (sells == null) {
        return mapping.findForward("sessionLost");
      }
      MemberSearch search = new MemberSearch();
      search.setEpYn("Y");
      search.setStatus("Y");
      if (StringUtils.defaultString(request.getParameter("search")).equals("")) {
        request.setAttribute("mainlist", null);
      } else {
        String[] selectObj = request.getParameterValues("field");
        String sp = request.getParameter("sp");
        if (selectObj != null) {
          for (int i = 0; i < selectObj.length; i++) {
            request.setAttribute(selectObj[i], "checked");
          }
        }
        request.setAttribute("sp", sp);
        StringBuffer sb = new StringBuffer();
        Collection<Member> list = memberService.findMemberBySearch2(search,
            sells.getSellsNo());
        if (!list.isEmpty()) {
          Iterator<Member> iter = list.iterator();
          Member vo = new Member();
          int k = 0;
          while (iter.hasNext()) {
            vo = iter.next();
            k++;
            sb.append(vo.getEmail()).append(sp);
            if (selectObj != null) {
              for (int i = 0; i < selectObj.length; i++) {
                if (selectObj[i].equals("namefield")) {
                  sb.append(vo.getName()).append(sp);
                }
                if (selectObj[i].equals("tel")) {
                  sb.append(vo.getTel()).append(sp);
                }
                if (selectObj[i].equals("mobile")) {
                  sb.append(vo.getMobile()).append(sp);
                }
                if (selectObj[i].equals("address")) {
                  sb.append(vo.getZip()).append(" ").append(vo.getAddress())
                      .append(sp);
                }
                if (selectObj[i].equals("birthDt")) {
                  sb.append(vo.getBirthDt()).append(sp);
                }
              }
            }
            sb.delete(sb.length() - 1, sb.length());
            sb.append("\n");
          }
          request.setAttribute("count", k);
          request.setAttribute("result", sb.toString());
        } else {
          request.setAttribute("count", 0);
          request.setAttribute("result", "尚無會員資料");
        }
        sb.setLength(0);
        sb = null;
      }
    } catch (Exception e) {
      log.info(e.getMessage());
      errors.add("errMsg", new ActionError("alert.Error", e.getMessage()));
      saveErrors(request, errors);
      return mapping.findForward("error1");
    }
    return mapping.findForward("success");
  }
}