/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sells.struts.action;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.sells.common.util.DateUtils;
import com.sells.dao.CarItem;
import com.sells.dao.Member;
import com.sells.dao.Sells;
import com.sells.service.imp.MemberService;
import com.sells.service.imp.SellsService;

/**
 * MyEclipse Struts Creation date: 02-15-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class OrderAction extends Action {
  private MemberService memberService;
  private SellsService sellsService;
  private Log log = LogFactory.getLog(OrderAction.class);
  private ServletContext servletContext;

  /*
   * (non-Javadoc)
   * 
   * @see org.apache.struts.action.Action#setServlet(org.apache.struts.action.ActionServlet)
   */
  public void setServlet(ActionServlet actionServlet) {
    super.setServlet(actionServlet);
    servletContext = actionServlet.getServletContext();
    WebApplicationContext wac = WebApplicationContextUtils
        .getRequiredWebApplicationContext(servletContext);
    this.sellsService = (SellsService) wac.getBean("sellsService");
    this.memberService = (MemberService) wac.getBean("memberService");
  }

  /**
   * Method execute
   * 
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward execute(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    HttpSession session = request.getSession();
    ActionErrors errors = new ActionErrors();
    try {
      String sellsNo = StringUtils.defaultString(request.getParameter("sells"));
      String email = StringUtils.defaultString(request.getParameter("email"));
      String password = StringUtils.defaultString(request.getParameter("password"));
      String member = StringUtils.defaultString(request.getParameter("member"));
      String sellsNoFromSession = ObjectUtils.toString(session.getAttribute("icSells"));
      String memNo = ObjectUtils.toString(session.getAttribute("icMem"));
      String memNm = ObjectUtils.toString(session.getAttribute("icMemNm"));

      if (sellsNo.equals("")) {
        errors.add("errMsg", new ActionError("alert.Error", "商家代號錯誤!"));
        saveErrors(request, errors);
        return mapping.findForward("error2");
      }
      Sells sells = (Sells) sellsService.findSellsById(sellsNo);
      if (sells == null) {
        errors.add("errMsg", new ActionError("alert.Error", "商家代號錯誤!"));
        saveErrors(request, errors);
        return mapping.findForward("error2");
      }
      if (sells.getExpiredDt().compareTo(DateUtils.getToday("yyyy/MM/dd")) < 0) {
        errors.add("errMsg", new ActionError("alert.Error", "商家使用期限至："
            + sells.getExpiredDt()));
        saveErrors(request, errors);
        return mapping.findForward("error2");
      }
      if (member.equals("1")) {
        try {
          Member vo = memberService.findMember(email, sellsNo, password);
          session.setAttribute("icSells", sellsNo);
          session.setAttribute("icMem",vo.getMemberNo());
          session.setAttribute("icMemNm",vo.getName());
          
          request.setAttribute("member", vo);
        } catch (Exception ee) {
          request.setAttribute("alertMsg", ee.getMessage());
          return mapping.findForward("error");
        }
      } else if (member.equals("2")) { //session login
          try {
            Member vo = memberService.findMemberById(memNo);
            session.setAttribute("icSells", sellsNoFromSession);
            session.setAttribute("icMem",memNo);
            session.setAttribute("icMemNm",memNm);
            request.setAttribute("member", vo);
          } catch (Exception ee) {
            request.setAttribute("alertMsg", ee.getMessage());
            return mapping.findForward("error");
          }
        } else {
        request.setAttribute("member", new Member());
      }
      
      ArrayList carItemList = new ArrayList();
      String[] itemNm = request.getParameterValues("itemNm");
      String[] itemNo = request.getParameterValues("itemNo");
      String[] price = request.getParameterValues("price");
      String[] qty = request.getParameterValues("qty");
      String[] spec1 = request.getParameterValues("spec1");
      String[] spec2 = request.getParameterValues("spec2");
      String[] seqno = request.getParameterValues("seqno");
      if (sellsNo.equals("S0000000026")) {
        int _toIcfare = 0 ;
        int _toOtfare = 0 ;
        int _iceQ = 0 ;
        int _iotQ = 0 ;
        //OrderTofu
        for (int i = 0; i < itemNo.length; i++) {
          CarItem carItem = new CarItem();
          carItem.setItemNm(itemNm[i]);
          carItem.setItemNo(itemNo[i]);
          carItem.setPrice(price[i]);
          carItem.setQty(qty[i]);
          carItem.setSpec1(spec1[i]);
          carItem.setSpec2(spec2[i]);
          carItem.setSeqno(Integer.parseInt(seqno[i]));
          if (carItemList == null) {
            carItemList = new ArrayList();
          }
          if (StringUtils.isNotBlank(itemNo[i])) {
            if (itemNo[i].startsWith("I")) {
              _iceQ = _iceQ +Integer.parseInt(StringUtils.defaultIfEmpty(qty[i], "0")) ;
            } else {
              _iotQ = _iotQ +Integer.parseInt(StringUtils.defaultIfEmpty(qty[i], "0")) ;
            }
          } else {
            _iotQ = _iotQ +Integer.parseInt(StringUtils.defaultIfEmpty(qty[i], "0")) ;
          }
          carItemList.add(carItem);
        }
        /*
         * 運費計算規則
         * 冰品：
         * 　＜　２４　＝　１５０元
         * 　＞＝２４　＜４８　＝２１０元
         * 　＞＝４８　＝２７０元
         * 非冰品：
         * 　＜＝４　＠１０元
         * 　＞４　８０元
         */
        if (_iceQ > 0 ) {
          if (_iceQ < 24 ) {
            _toIcfare = 150 ;
          } else if (_iceQ >=24 && _iceQ < 48) {
            _toIcfare = 210 ;
          } else {
            _toIcfare = 270 ;
          }
        }
        if (_iotQ > 0){
          if (_iotQ <= 4) {
            _toOtfare = _iotQ * 10 ;
          } else {
            _toOtfare = 80 ;
          }
        }
        session.setAttribute("itemSeq", session.getAttribute("seqno"));
        session.setAttribute(sellsNo, carItemList);
        request.setAttribute("car", carItemList);
        request.setAttribute("sells", sells);
        request.setAttribute("_toIcfare", _toIcfare);
        request.setAttribute("_toOtfare", _toOtfare);
        return mapping.findForward("successTofu");
      } else {
        for (int i = 0; i < itemNo.length; i++) {
          CarItem carItem = new CarItem();
          carItem.setItemNm(itemNm[i]);
          carItem.setItemNo(itemNo[i]);
          carItem.setPrice(price[i]);
          carItem.setQty(qty[i]);
          carItem.setSpec1(spec1[i]);
          carItem.setSpec2(spec2[i]);
          carItem.setSeqno(Integer.parseInt(seqno[i]));
          if (carItemList == null) {
            carItemList = new ArrayList();
          }
          carItemList.add(carItem);
        }
        session.setAttribute("itemSeq", session.getAttribute("seqno"));
        session.setAttribute(sellsNo, carItemList);
        request.setAttribute("car", carItemList);
        request.setAttribute("sells", sells);
        return mapping.findForward("success");
      }
    } catch (Exception e) {
      return mapping.findForward("success");
      // return mapping.findForward("sessionLost");
    }
  }
}