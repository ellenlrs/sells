/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sells.struts.action.member;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.sells.common.mail.Mail;
import com.sells.common.mail.MailBean;
import com.sells.common.util.DateUtils;
import com.sells.common.util.EcServer;
import com.sells.dao.Member;
import com.sells.dao.Sells;
import com.sells.service.imp.MemberService;
import com.sells.service.imp.SellsService;

/**
 * MyEclipse Struts Creation date: 09-03-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class QrpwdMemberAction extends Action {
  private SellsService sellsService;
  private MemberService memberService;
  private final Log log = LogFactory.getLog(QrpwdMemberAction.class);
  private ServletContext servletContext;

  /*
   * (non-Javadoc)
   * 
   * @see org.apache.struts.action.Action#setServlet(org.apache.struts.action.
   * ActionServlet)
   */
  @Override
  public void setServlet(ActionServlet actionServlet) {
    super.setServlet(actionServlet);
    servletContext = actionServlet.getServletContext();
    WebApplicationContext wac = WebApplicationContextUtils
        .getRequiredWebApplicationContext(servletContext);
    this.sellsService = (SellsService) wac.getBean("sellsService");
    this.memberService = (MemberService) wac.getBean("memberService");
  }

  /**
   * Method execute
   * 
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  @Override
  public ActionForward execute(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    ActionErrors errors = new ActionErrors();
    // 1.確認Sells 是否到期
    try {
      String sellsNo = StringUtils.defaultString(request.getParameter("sells"));
      if (sellsNo.equals("")) {
        errors.add("errMsg", new ActionError("alert.Error", "商家代號錯誤!"));
        saveErrors(request, errors);
        return mapping.findForward("memError");
      }
      Sells sells = sellsService.findSellsById(sellsNo);
      if (sells == null) {
        errors.add("errMsg", new ActionError("alert.Error", "商家代號錯誤!"));
        saveErrors(request, errors);
        return mapping.findForward("memError");
      }
      if (sells.getExpiredDt().compareTo(DateUtils.getToday("yyyy/MM/dd")) < 0) {
        errors.add("errMsg",
            new ActionError("alert.Error", "商家使用期限至：" + sells.getExpiredDt()));
        saveErrors(request, errors);
        return mapping.findForward("memError");
      }
      request.setAttribute("sells", sells);
      // 2.查詢會員
      Member vo = memberService.findMemberPassword(
          request.getParameter("email"), request.getParameter("sells"),
          request.getParameter("name"), request.getParameter("birthDt"));
      log.info("aa");
      request.setAttribute("member", vo);
      if (vo == null) {
        request.setAttribute("Status", "1");
      } else if (vo.getMemberNo() == null) {
        request.setAttribute("Status", "2");
      } else {
        // Send mail
        request.setAttribute("Status", "3");
        StringBuffer sb = new StringBuffer();
        sb.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
        sb.append("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
        sb.append("<head>");
        sb.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />");
        sb.append("<title>").append(sells.getSellsNm())
            .append(" 會員密碼查詢</title>");
        sb.append("</head>");
        sb.append("");
        sb.append("<body>");
        sb.append("<p><br />");
        sb.append("  親愛的 ").append(vo.getName()).append(" 您好：");
        sb.append("  <br />");
        sb.append("</p>");
        sb.append("<p>這是系統自動發出的訊息。<br /><br />");
        sb.append("您的密碼：").append(vo.getPassword()).append("<br />");
        sb.append("<p>為了保障您的權益，請您牢記且妥善保管您的帳號及密碼。<br />");
        sb.append("  <br />");
        sb.append("<br />");
        sb.append(sells.getStoreNm()).append("站長敬上。</p>");
        sb.append("<p><a href=\"").append(sells.getHomepage()).append("\">")
            .append(sells.getStoreNm()).append("</a></p>");
        sb.append("</body>");
        sb.append("</html>");
        MailBean mailBean = new MailBean();
        mailBean.setFrom(sells.getEmail());
        mailBean.setFromName(sells.getSellsNm());
        mailBean.setTo(vo.getEmail());
        mailBean.setToName(vo.getName());
        mailBean.setMailServer(EcServer.getMailServer());
        mailBean.setSubject(sells.getStoreNm() + " - 會員密碼查詢");
        mailBean.setBody(sb.toString());
        mailBean.setCharset("UTF-8");
        try {
          Mail mail = new Mail(mailBean);
        } catch (Exception e) {
          log.info("mail e:" + e.getMessage());
        }
        log.info("bb");
      }
      return mapping.findForward("success");
    } catch (Exception e) {
      log.info(e.toString());
      errors.add("errMsg", new ActionError("alert.Error", e.getMessage()));
      saveErrors(request, errors);
      return mapping.findForward("memError");
    }
  }
}