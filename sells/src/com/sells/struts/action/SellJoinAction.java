/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sells.struts.action;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.sells.common.mail.Mail;
import com.sells.common.mail.MailBean;
import com.sells.common.util.DateUtils;
import com.sells.common.util.EcServer;
import com.sells.dao.LoginData;
import com.sells.dao.Sells;
import com.sells.service.imp.SellsService;
import com.sells.struts.form.SellForm;

/**
 * MyEclipse Struts Creation date: 02-03-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/SellsJoin" name="sellsForm" input="/form/sells.jsp"
 *                scope="request" validate="true"
 */
public class SellJoinAction extends Action {
  private SellsService sellsService;
  private final Log log = LogFactory.getLog(SellJoinAction.class);
  private ServletContext servletContext;

  /*
   * (non-Javadoc)
   * 
   * @see org.apache.struts.action.Action#setServlet(org.apache.struts.action.
   * ActionServlet)
   */
  @Override
  public void setServlet(ActionServlet actionServlet) {
    super.setServlet(actionServlet);
    servletContext = actionServlet.getServletContext();
    WebApplicationContext wac = WebApplicationContextUtils
        .getRequiredWebApplicationContext(servletContext);
    this.sellsService = (SellsService) wac.getBean("sellsService");
  }

  /**
   * Method execute
   * 
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  @Override
  public ActionForward execute(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    SellForm sellsForm = (SellForm) form;
    Sells sellsvo = new Sells();
    LoginData loginvo = new LoginData();
    ActionErrors errors = new ActionErrors();
    try {
      if (StringUtils.defaultString(sellsForm.getLoginId()).equals("")) {
        errors.add("errMsg", new ActionError("alert.Error", "帳號  未輸入"));
        saveErrors(request, errors);
        return mapping.findForward("globalFail");
      }
      if (StringUtils.defaultString(sellsForm.getRePasswd()).equals("")) {
        errors.add("errMsg", new ActionError("alert.Error", "密碼 未輸入"));
        saveErrors(request, errors);
        return mapping.findForward("globalFail");
      }
      if (!sellsForm.getRePasswd().equals(sellsForm.getPasswd())) {
        errors.add("errMsg", new ActionError("alert.Error", "密碼驗證錯誤"));
        saveErrors(request, errors);
        return mapping.findForward("globalFail");
      }
      if (StringUtils.defaultString(sellsForm.getEmail()).equals("")) {
        errors.add("errMsg", new ActionError("alert.Error", "Email 未輸入"));
        saveErrors(request, errors);
        return mapping.findForward("globalFail");
      }
      if (StringUtils.defaultString(sellsForm.getHomepage()).equals("")) {
        errors.add("errMsg", new ActionError("alert.Error", "店家網頁 未輸入"));
        saveErrors(request, errors);
        return mapping.findForward("globalFail");
      }
      if (StringUtils.defaultString(sellsForm.getSellsNm()).equals("")) {
        errors.add("errMsg", new ActionError("alert.Error", "姓名 未輸入"));
        saveErrors(request, errors);
        return mapping.findForward("globalFail");
      }
      if (StringUtils.defaultString(sellsForm.getStoreNm()).equals("")) {
        errors.add("errMsg", new ActionError("alert.Error", "店名  未輸入"));
        saveErrors(request, errors);
        return mapping.findForward("globalFail");
      }
      if (StringUtils.defaultString(request.getParameter("color")).equals("0")
          || StringUtils.isBlank(request.getParameter("color"))) {
        sellsvo.setColorTp("1");
        sellsvo.setColor1("#006699");
        sellsvo.setColor2("#99CCFF");
      } else {
        sellsvo.setColorTp(request.getParameter("color").split(",")[0]);
        sellsvo.setColor1(request.getParameter("color").split(",")[1]);
        sellsvo.setColor2(request.getParameter("color").split(",")[2]);
      }
      BeanUtils.copyProperties(sellsvo, sellsForm);
      BeanUtils.copyProperties(loginvo, sellsForm);
      sellsvo.setExpiredDt(DateUtils.getTodayAddDays(30, "yyyy/MM/dd"));
      sellsvo.setJoinDt(DateUtils.getToday("yyyy/MM/dd"));
      loginvo.setLoginTp("S");
      sellsvo.setUpdateDt(new java.util.Date());
      sellsvo.setFreightFare(100);
      sellsvo.setLowAccount(0);
      sellsvo.setNofreightFare(0);
      sellsvo.setNofreightQty(0);
      sellsvo.setFreightTp("0");
      sellsvo.setPayDesc("");
      sellsvo = sellsService.saveSells(sellsvo, loginvo);
      Sells admin = sellsService.findSellsById(EcServer.getAdminNo());
      StringBuffer sb = new StringBuffer();
      sb.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
      sb.append("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
      sb.append("<head>");
      sb.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />");
      sb.append("<title>歡迎  ").append(sellsvo.getSellsNm())
          .append(" 加入</title>");
      sb.append("</head>");
      sb.append("");
      sb.append("<body>");
      sb.append("<p><br />");
      sb.append("  親愛的 ").append(sellsvo.getSellsNm()).append(" 您好：");
      sb.append("  <br />");
      sb.append("</p>");
      sb.append("<p>這是系統自動發出的訊息。<br />");
      sb.append("  您已成功申請加入的  ").append(admin.getStoreNm())
          .append(" 系統，您的試用期限：").append(sellsvo.getExpiredDt())
          .append("。<br />");
      sb.append("您的帳號：").append(loginvo.getLoginId()).append(" <br />");
      sb.append("您的商場：<a href='").append(sellsvo.getHomepage())
          .append("' target='_blank' >").append(sellsvo.getStoreNm())
          .append("</a></p>");
      sb.append("<p>為了保障您的權益，請您牢記且妥善保管您的帳號及密碼。<br />");
      sb.append("  <br />");
      sb.append("  若想成為正式賣家，請登入本系統後購買延長服務即可。<br />");
      sb.append("  <br />");
      sb.append("若有任何問題請到<a href=\"").append(admin.getHomepage())
          .append("/Sells/help.jsp\">問題反應區</a>與站長聯絡。<br />");
      sb.append("<br />");
      sb.append("站長敬上。</p>");
      sb.append("<p><a href=\"").append(admin.getHomepage()).append("\">")
          .append(admin.getStoreNm()).append("</a></p>");
      sb.append("</body>");
      sb.append("</html>");
      MailBean mailBean = new MailBean();
      mailBean.setFrom(admin.getEmail());
      mailBean.setFromName(admin.getSellsNm());
      mailBean.setTo(sellsvo.getEmail());
      mailBean.setToName(sellsvo.getSellsNm());
      mailBean.setBcc(admin.getEmail());
      mailBean.setMailServer(EcServer.getMailServer());
      mailBean.setSubject(admin.getStoreNm() + " - 申請通知");
      mailBean.setBody(sb.toString());
      mailBean.setCharset("UTF-8");
      try {
        Mail mail = new Mail(mailBean);
      } catch (Exception e) {
        log.info("GetPasswdAction mail e:" + e.getMessage());
      }
      sb = null;
      admin = null;
      HttpSession session = request.getSession();
      session.setAttribute("sells", sellsvo);
      session.setAttribute("loginvo", loginvo);
      return mapping.findForward("success");
    } catch (Exception e1) {
      log.info("SellsJoin Exception :" + e1.getMessage());
      errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("join.Error",
          "申請失敗：" + e1.getMessage()));
      saveErrors(request, errors);
      return mapping.getInputForward();
    }
  }
}