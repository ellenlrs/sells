/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sells.struts.action.order;

import java.util.Collection;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import com.sells.dao.Orders;
import com.sells.dao.Sells;
import com.sells.service.imp.SellsService;

/** 
 * MyEclipse Struts
 * Creation date: 09-07-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class SellOrderMessageListAction extends Action {
  private SellsService sellsService;
  private Log log = LogFactory.getLog(SellOrderMessageListAction.class);
  private ServletContext servletContext;

  /*
   * (non-Javadoc)
   * 
   * @see org.apache.struts.action.Action#setServlet(org.apache.struts.action.ActionServlet)
   */
  public void setServlet(ActionServlet actionServlet) {
    super.setServlet(actionServlet);
    servletContext = actionServlet.getServletContext();
    WebApplicationContext wac = WebApplicationContextUtils
        .getRequiredWebApplicationContext(servletContext);
    this.sellsService = (SellsService) wac.getBean("sellsService");
  }

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
    HttpSession session = request.getSession ();
    ActionErrors errors = new ActionErrors();
    try {
      Sells sells = (Sells) session.getAttribute("sells") ;
      if (sells == null ) {
        return mapping.findForward("sessionLost1");
      }
      if (StringUtils.isBlank(request.getParameter("orderNo"))){
        errors.add("errMsg", new ActionError("alert.Error","訂單編號異常1"));
        saveErrors(request, errors);
        return mapping.findForward("error3");
      }
      String orderNo = StringUtils.defaultString(request.getParameter("orderNo")) ;
      String st = StringUtils.defaultString(request.getParameter("st")) ;
      //需要判斷此訂單是不是有擁有權，增加安全性
      Orders vo = sellsService.getOrdersById(StringUtils.defaultString(request.getParameter("orderNo")), sells.getSellsNo(), null);
      if ( vo != null && StringUtils.isNotBlank(vo.getOrderNo())){
        Collection items = sellsService.findOrdersMsg(orderNo, st);
        request.setAttribute("orderNo",orderNo);
        request.setAttribute("st",st);
        request.setAttribute("items",items);
        return mapping.findForward("success");
      } else {
        errors.add("errMsg", new ActionError("alert.Error","訂單編號異常2"));
        saveErrors(request, errors);
        return mapping.findForward("error3");
      }
    } catch (Exception e) {
      log.info(e.getMessage());
      errors.add("errMsg", new ActionError("alert.Error", e.getMessage()));
      saveErrors(request, errors);
      return mapping.findForward("error3");
    }
	}
}