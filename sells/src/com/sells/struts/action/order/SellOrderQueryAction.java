/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sells.struts.action.order;

import java.util.Collection;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import com.sells.common.util.HibernatePageAction;
import com.sells.common.util.PageControl;
import com.sells.dao.Orders;
import com.sells.dao.Sells;
import com.sells.search.OrdersSearch;
import com.sells.service.imp.SellsService;

/** 
 * MyEclipse Struts
 * Creation date: 09-07-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class SellOrderQueryAction extends HibernatePageAction {
  private SellsService sellsService;
  private Log log = LogFactory.getLog(SellOrderQueryAction.class);
  private ServletContext servletContext;

  /*
   * (non-Javadoc)
   * 
   * @see org.apache.struts.action.Action#setServlet(org.apache.struts.action.ActionServlet)
   */
  public void setServlet(ActionServlet actionServlet) {
    super.setServlet(actionServlet);
    servletContext = actionServlet.getServletContext();
    WebApplicationContext wac = WebApplicationContextUtils
        .getRequiredWebApplicationContext(servletContext);
    this.sellsService = (SellsService) wac.getBean("sellsService");
  }

  @Override
  public ActionForward readPage(ActionMapping mapping, HttpServletRequest request, HttpServletResponse response, PageControl pagecontrol) {
    HttpSession session = request.getSession ();
    ActionErrors errors = new ActionErrors();
    try {
      Sells sells = (Sells) session.getAttribute("sells") ;
      if (sells == null ) {
        return mapping.findForward("sessionLost");
      }
      pagecontrol.setShowrows(20);
      OrdersSearch search = new OrdersSearch();
      search.setOrderNo(StringUtils.defaultString(request.getParameter("orderNo")));
      search.setEndDt(StringUtils.defaultString(request.getParameter("endDt")));
      search.setName(StringUtils.defaultString(request.getParameter("name")));
      search.setOrderSt(StringUtils.defaultString(request.getParameter("orderSt")));
      search.setSellsNo(sells.getSellsNo());
      search.setStartDt(StringUtils.defaultString(request.getParameter("startDt")));
      request.getSession().setAttribute("_SEARCH", search);
      if (StringUtils.defaultString(request.getParameter("search")).equals("")) {
        request.setAttribute("mainlist",null);
      } else {
        Collection<Orders> list = sellsService.findOrdersSearch(search, pagecontrol) ;
        request.setAttribute("mainlist",list);
      }
    } catch (Exception e) {
      log.info(e.getMessage());
      errors.add("errMsg", new ActionError("alert.Error", e.getMessage()));
      saveErrors(request, errors);
      return mapping.findForward("error1");
    }
    return mapping.findForward("success");
  }

  @Override
  public int readSize(ActionMapping mapping, HttpServletRequest request, HttpServletResponse response, PageControl pagecontrol) {
    int rowSize = 0 ;
    HttpSession session = request.getSession ();
    try {
      Sells sells = (Sells) session.getAttribute("sells") ;
      String sellsNo = "" ;
      if (sells != null ) {
        sellsNo = sells.getSellsNo();
      }
      OrdersSearch search = new OrdersSearch();
      search.setOrderNo(StringUtils.defaultString(request.getParameter("orderNo")));
      search.setEndDt(StringUtils.defaultString(request.getParameter("endDt")));
      search.setName(StringUtils.defaultString(request.getParameter("name")));
      search.setOrderSt(StringUtils.defaultString(request.getParameter("orderSt")));
      search.setSellsNo(sellsNo);
      search.setStartDt(StringUtils.defaultString(request.getParameter("startDt")));
      pagecontrol.setShowrows(20);
      if (!StringUtils.defaultString(request.getParameter("search")).equals("")) {
        rowSize = sellsService.findOrdersSearchSize(search) ;
      }
    } catch (Exception e) { log.debug(e.getMessage()); }
    return rowSize;
  }
}