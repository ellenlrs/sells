/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sells.struts.action;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.sells.dao.CarItem;
import com.sells.dao.Member;
import com.sells.dao.Orders;
import com.sells.dao.OrdersItem;
import com.sells.dao.Sells;
import com.sells.service.imp.MemberService;
import com.sells.service.imp.SellsService;

/** 
 * MyEclipse Struts
 * Creation date: 12-05-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ReOrderAction extends Action {
  private MemberService memberService;
  private SellsService sellsService ;
  private Log log = LogFactory.getLog(ReOrderAction.class);
  private ServletContext servletContext;
  
  /* (non-Javadoc)
   * @see org.apache.struts.action.Action#setServlet(org.apache.struts.action.ActionServlet)
   */
  public void setServlet(ActionServlet actionServlet) {
      super.setServlet(actionServlet);
      servletContext = actionServlet.getServletContext();
      WebApplicationContext wac = WebApplicationContextUtils
              .getRequiredWebApplicationContext(servletContext);
      this.sellsService =  (SellsService) wac.getBean("sellsService");
      this.memberService = (MemberService) wac.getBean("memberService");
  }

  /** 
   * Method execute
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward execute(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    HttpSession session = request.getSession ();
    String checksum = StringUtils.defaultString(request.getParameter("checksum"));
    String orderNo = StringUtils.defaultString(request.getParameter("orderNo"));
    StringBuffer sb = new StringBuffer();
    try {
      Orders vo = sellsService.getOrdersById(orderNo);
      sb.append(orderNo).append(vo.getSellsNo()).append("iCart856069");
      String icartChecksum = DigestUtils.md5Hex(sb.toString());
      if (! icartChecksum.equals(checksum)) 
        throw new Exception ("檢查碼錯誤") ;
      Collection orderItem = sellsService.findOrdersItemById(orderNo);
      Sells sells = sellsService.findSellsById(vo.getSellsNo());
      if (StringUtils.isNotBlank(vo.getMemberNo())) {
        try {
          Member memvo = memberService.findMemberById(vo.getMemberNo());
          session.setAttribute("icSells", vo.getSellsNo());
          session.setAttribute("icMem",memvo.getMemberNo());
          session.setAttribute("icMemNm",memvo.getName());
          request.setAttribute("member", vo);
        } catch (Exception ee) {
        }
      }
      ArrayList carItemList = new ArrayList();
      String[] itemNm = request.getParameterValues("itemNm");
      String[] itemNo = request.getParameterValues("itemNo");
      String[] price = request.getParameterValues("price");
      String[] qty = request.getParameterValues("qty");
      String[] spec1 = request.getParameterValues("spec1");
      String[] spec2 = request.getParameterValues("spec2");
      String[] seqno = request.getParameterValues("seqno");
      Iterator iter = orderItem.iterator();
      while (iter.hasNext()) {
        OrdersItem item = (OrdersItem) iter.next();
        CarItem carItem = new CarItem();
        carItem.setItemNm(item.getItemNm());
        carItem.setItemNo(item.getItemNo());
        carItem.setPrice(String.valueOf(item.getPrice()));
        carItem.setQty(String.valueOf(item.getQty()));
        carItem.setSpec1(item.getItemSpec1());
        carItem.setSpec2(item.getItemSpec2());
        carItem.setSeqno(item.getId().getSeqno());
        carItemList.add(carItem);
      }
      session.setAttribute(vo.getSellsNo(), carItemList);
      request.setAttribute("car", carItemList);
      request.setAttribute("sells", sells);
      request.setAttribute("order", vo);
      return mapping.findForward("success");
    } catch (Exception e) {
      log.info(e.toString());
      return mapping.findForward("fail-check");
    }
  }
}