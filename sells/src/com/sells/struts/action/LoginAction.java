/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sells.struts.action;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import com.sells.dao.LoginData;
import com.sells.dao.Sells;
import com.sells.service.imp.SellsService;

/** 
 * MyEclipse Struts
 * Creation date: 02-03-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class LoginAction extends Action {
  private SellsService sellsService ;
  private Log log = LogFactory.getLog(LoginAction.class);
  private ServletContext servletContext;
  
  /* (non-Javadoc)
   * @see org.apache.struts.action.Action#setServlet(org.apache.struts.action.ActionServlet)
   */
  public void setServlet(ActionServlet actionServlet) {
      super.setServlet(actionServlet);
      servletContext = actionServlet.getServletContext();
      WebApplicationContext wac = WebApplicationContextUtils
              .getRequiredWebApplicationContext(servletContext);
      this.sellsService =  (SellsService) wac.getBean("sellsService");
  } 

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String loginId = request.getParameter("loginId") ;
    String passwd = request.getParameter("passwd");
    String loginTp = StringUtils.defaultString(request.getParameter("loginTp"),"S");
    ActionErrors errors = new ActionErrors();
    try {
      LoginData loginvo = sellsService.findLoginDataByLoginId(loginId, loginTp, passwd,request.getRemoteAddr());
      Sells sells = new Sells();
      if (loginvo != null ) {
        sells = sellsService.findSellsById(loginvo.getSellsNo()) ;
        if ( sells.getSellsLv().equals("S")) {
          errors.add("errMsg", new ActionError("alert.Error","此帳號暫停使用，請聯絡站長！"));
          saveErrors(request, errors);
          return mapping.findForward("globalFail");
        } else {
          HttpSession session = request.getSession ();
          session.setAttribute("sells", sells) ;
          session.setAttribute("loginvo", loginvo) ;
          return mapping.findForward("success");
        }
      } else {
        errors.add("errMsg", new ActionError("alert.Error","帳號密碼錯誤-2"));
        saveErrors(request, errors);
        return mapping.findForward("globalFail");
      }
    } catch (Exception e) {
      errors.add("errMsg", new ActionError("alert.Error","帳號密碼錯誤-1"));
      saveErrors(request, errors);
      return mapping.findForward("globalFail");
    }
	}
}