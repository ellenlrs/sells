/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sells.struts.action;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import com.sells.common.mail.Mail;
import com.sells.common.mail.MailBean;
import com.sells.common.util.EcServer;
import com.sells.dao.LoginData;
import com.sells.dao.Sells;
import com.sells.service.imp.SellsService;

/** 
 * MyEclipse Struts
 * Creation date: 02-09-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="success" path="/update.jsp"
 */
public class SellUpdateAction extends Action {
  private SellsService sellsService ;
  private Log log = LogFactory.getLog(SellUpdateAction.class);
  private ServletContext servletContext;
  
  /* (non-Javadoc)
   * @see org.apache.struts.action.Action#setServlet(org.apache.struts.action.ActionServlet)
   */
  public void setServlet(ActionServlet actionServlet) {
      super.setServlet(actionServlet);
      servletContext = actionServlet.getServletContext();
      WebApplicationContext wac = WebApplicationContextUtils
              .getRequiredWebApplicationContext(servletContext);
      this.sellsService =  (SellsService) wac.getBean("sellsService");
  } 

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
    ActionErrors errors = new ActionErrors();
    HttpSession session = request.getSession ();
    try {
      Sells sells= (Sells) session.getAttribute("sells") ;
      LoginData loginvo= (LoginData) session.getAttribute("loginvo") ;
      if (sells == null ) {
        return mapping.findForward("sessionLost");
      } else if (!loginvo.getLoginTp().equals("A")){
        errors.add("errMsg", new ActionError("alert.Error","權限不足"));
        saveErrors(request, errors);
        return mapping.findForward("globalFail");  
      } else {
        Sells sellsvo = sellsService.findSellsById(StringUtils.defaultString(request.getParameter("sellsNo"))) ;
        if (StringUtils.defaultString(request.getParameter("email")).equals("") ) {
          errors.add("errMsg", new ActionError("alert.Error","Email 未輸入"));
          saveErrors(request, errors);
          return mapping.findForward("error1");
        }
        if (StringUtils.defaultString(request.getParameter("homepage")).equals("") ) {
          errors.add("errMsg", new ActionError("alert.Error","店家網頁 未輸入"));
          saveErrors(request, errors);
          return mapping.findForward("error1");
        }
        if (StringUtils.defaultString(request.getParameter("sellsNm")).equals("") ) {
          errors.add("errMsg", new ActionError("alert.Error","姓名 未輸入"));
          saveErrors(request, errors);
          return mapping.findForward("error1");
        }
        if (StringUtils.defaultString(request.getParameter("storeNm")).equals("") ) {
          errors.add("errMsg", new ActionError("alert.Error","店名  未輸入"));
          saveErrors(request, errors);
          return mapping.findForward("error1");
        }
        if (sellsvo == null ) {
          errors.add("errMsg", new ActionError("alert.Error","讀取資料異常!"));
          saveErrors(request, errors);
          return mapping.findForward("globalFail");
        } else {
          if (StringUtils.defaultString(request.getParameter("color")).equals("0") || StringUtils.isBlank(request.getParameter("color")) ) {
            sellsvo.setColorTp("1");
            sellsvo.setColor1("#006699");
            sellsvo.setColor2("#99CCFF");
          } else {
            sellsvo.setColorTp(request.getParameter("color").split(",")[0]);
            sellsvo.setColor1(request.getParameter("color").split(",")[1]);
            sellsvo.setColor2(request.getParameter("color").split(",")[2]);        
          }
          
          sellsvo.setEmail(request.getParameter("email"));
          sellsvo.setHomepage(request.getParameter("homepage"));
          sellsvo.setSellsNm(request.getParameter("sellsNm"));
          sellsvo.setStoreNm(request.getParameter("storeNm"));
          sellsvo.setLogo(StringUtils.defaultString(request.getParameter("logo")));
          sellsvo.setPayType1(StringUtils.defaultString(request.getParameter("payType1"),"0"));
          sellsvo.setPayType2(StringUtils.defaultString(request.getParameter("payType2"),"0"));
          sellsvo.setPayType3(StringUtils.defaultString(request.getParameter("payType3"),"0"));
          sellsvo.setPayType4(StringUtils.defaultString(request.getParameter("payType4"),"0"));
          sellsvo.setPayType5(StringUtils.defaultString(request.getParameter("payType5"),"0"));
          sellsvo.setFeedbackCode(StringUtils.defaultString(request.getParameter("feedbackCode"),""));
          sellsvo.setSendCode(StringUtils.defaultString(request.getParameter("sendCode"),""));
          sellsvo.setStoreId(StringUtils.defaultString(request.getParameter("storeId"),""));
          sellsvo.setExpiredDt(request.getParameter("expiredDt"));
          sellsvo.setSellsLv(request.getParameter("sellsLv"));
          sellsService.updateSells(sellsvo);
          
          
          Sells admin = sellsService.findSellsById(EcServer.getAdminNo());
          StringBuffer sb = new StringBuffer();
          sb.append("");
          sb.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
          sb.append("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
          sb.append("<head>");
          sb.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />");
          sb.append("<title> ").append(sellsvo.getSellsNm()).append(" 異動通知</title>");
          sb.append("</head>");
          sb.append("");
          sb.append("<body>");
          sb.append("<p><br />");
          sb.append("  親愛的 ").append(sellsvo.getSellsNm()).append(" 您好：");
          sb.append("  <br />");
          sb.append("</p>");
          sb.append("<p>這是系統自動發出的訊息。<br />");
          sb.append(admin.getSellsNm()).append(" 更新您的下列資料，<BR />");
          sb.append("您的使用期限：").append(sellsvo.getExpiredDt()).append("。<br />");
          sb.append("您的帳號等級：");
          if (sellsvo.getSellsLv().equals("T")) {
            sb.append("試用會員");
          } else if (sellsvo.getSellsLv().equals("R")) {
            sb.append("正式會員");
          } else if (sellsvo.getSellsLv().equals("T")) {
            sb.append("停止使用");
          }
          sb.append(sellsvo.getSellsLv()).append(" <br />");
          sb.append("<p>感謝您使用本服務。<br />");
          sb.append("  <br />");
          sb.append("若有任何問題請到<a href=\"").append(admin.getHomepage()).append("/Sells/help.jsp\">問題反應區</a>與站長聯絡。<br />");
          sb.append("<br />");
          sb.append("站長敬上。</p>");
          sb.append("<p><a href=\"").append(admin.getHomepage()).append("\">").append(admin.getStoreNm()).append("</a></p>");
          sb.append("</body>");
          sb.append("</html>");
          MailBean mailBean = new MailBean();
          mailBean.setFrom(admin.getEmail());
          mailBean.setFromName(admin.getSellsNm());
          mailBean.setTo(sellsvo.getEmail());
          mailBean.setToName(sellsvo.getSellsNm());
          mailBean.setBcc(admin.getEmail());
          mailBean.setMailServer(EcServer.getMailServer());
          mailBean.setSubject(admin.getStoreNm()+ " - 異動通知");
          mailBean.setBody(sb.toString());
          mailBean.setCharset("UTF-8");
          try {
            Mail mail = new Mail(mailBean);
          } catch (Exception e) {
            log.info("GetPasswdAction mail e:" + e.getMessage());
          }
          sb = null ;
          admin = null ;
          
          session.setAttribute("sells", sells) ;
          session.setAttribute("loginvo", loginvo) ;
          return mapping.findForward("success");
        }
      }
    } catch (Exception e ) {
      log.info("SellUpdate e:" + e.toString());
      errors.add("errMsg", new ActionError("alert.Error","異動失敗!"+e.getMessage()));
      saveErrors(request, errors);
      return mapping.findForward("error1");
    }
	}
}