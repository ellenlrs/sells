/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sells.struts.action;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionServlet;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import com.sells.common.util.SellsSearch;
import com.sells.dao.LoginData;
import com.sells.dao.Sells;
import com.sells.service.imp.SellsService;

/** 
 * MyEclipse Struts
 * Creation date: 02-09-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="success" path="/sellList.jsp"
 */
public class SellListAction extends Action {
  private SellsService sellsService ;
  private Log log = LogFactory.getLog(SellListAction.class);
  private ServletContext servletContext;
  
  /* (non-Javadoc)
   * @see org.apache.struts.action.Action#setServlet(org.apache.struts.action.ActionServlet)
   */
  public void setServlet(ActionServlet actionServlet) {
      super.setServlet(actionServlet);
      servletContext = actionServlet.getServletContext();
      WebApplicationContext wac = WebApplicationContextUtils
              .getRequiredWebApplicationContext(servletContext);
      this.sellsService =  (SellsService) wac.getBean("sellsService");
  } 
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
    ActionErrors errors = new ActionErrors();
    HttpSession session = request.getSession ();
    try {
      Sells sells= (Sells) session.getAttribute("sells") ;
      LoginData loginvo= (LoginData) session.getAttribute("loginvo") ;
      if (sells == null ) {
        return mapping.findForward("sessionLost");
      } else if (!loginvo.getLoginTp().equals("A")){
        errors.add("errMsg", new ActionError("alert.Error","權限不足"));
        saveErrors(request, errors);
        return mapping.findForward("error1");  
      } else {
        SellsSearch search = new SellsSearch();
        search.setExpiredDt(StringUtils.defaultString(request.getParameter("expiredDt")));
        search.setLoginId(StringUtils.defaultString(request.getParameter("loginId")));
        search.setSellsLv(StringUtils.defaultString(request.getParameter("sellsLv")));
        search.setSellsNm(StringUtils.defaultString(request.getParameter("sellsNm")));
        search.setSellsNo(StringUtils.defaultString(request.getParameter("sellsNo")));
        search.setStoreNm(StringUtils.defaultString(request.getParameter("storeNm")));
        search = sellsService.findSellsSearch(search);
        request.setAttribute("search", search);
        session.setAttribute("sells", sells) ;
        session.setAttribute("loginvo", loginvo) ;
        return mapping.findForward("success");
      }
    } catch (Exception e) {
      errors.add("errMsg", new ActionError("alert.Error","查詢資料異常!"));
      saveErrors(request, errors);
      log.info("SearchList e:" + e.toString());
      return mapping.findForward("error1");      
    }
	}
}